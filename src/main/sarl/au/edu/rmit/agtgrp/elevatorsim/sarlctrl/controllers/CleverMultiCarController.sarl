/** 
 *
 *
 */
 
package au.edu.rmit.agtgrp.elevatorsim.sarlctrl.controllers

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import au.edu.rmit.agtgrp.elevatorsim.Direction

import au.edu.rmit.agtgrp.elevatorsim.sarlmw.capacities.Cap_Reporting
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.capacities.Cap_SimulatorInteraction

import au.edu.rmit.agtgrp.elevatorsim.sarlmw.skills.Skill_SingleSimulatorInteraction
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.skills.Skill_ConsoleReporting

import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.CarArrivedPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.DoorClosedPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.ModelChangePercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.SendCarAction
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.CarRequestPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.FloorRequestPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.PersonEnteredPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.PersonExitedPercept

import java.util.PriorityQueue
import java.util.Comparator

import astar.*



/** 
 * Vanessa Toborek
 */
 
@SuppressWarnings("potential_field_synchronization_problem")
agent CleverMultiCarController {
	uses DefaultContextInteractions, Cap_SimulatorInteraction, Cap_Reporting

	val agentName = "AStarMultiCarController"

	// //////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////// BELIEFS ////////////////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Data-beliefs to keep track
	
	var simulator_host = 'localhost'
	var simulator_port = 8081

	var numCars : int = 0 // number of cars in the simulation
	var lowestFloor : int // number of the lowest floor (e.g., 1)
	var highestFloor : int // number of the highest floor in the building

	var currentFloor : int = 1 // current floor the car is in
	var moving : boolean = false // the car is currently moving
	val maxCapacity : int = 5
	var currentCapacity : int
	
	var queue : PriorityQueue<Integer> = new PriorityQueue

	// //////////////////////////////////////////////////////////////////////////////////////////////////////////
	// /////////////////////////////////////// REACTIVE BEHAVIORS NOW ///////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////////////////////////////////////////////
	on Initialize {
		var params = occurrence.parameters

		// Setup Console Reporting skill to report/talk behavior
		setSkill(new Skill_ConsoleReporting(3, agentName), Cap_Reporting)

		// Setup skill to control elevator simulator
		// (includes connecting to simulator)
		if (params.size == 2) {
			simulator_host = params.get(0) as String
			simulator_port = Integer.parseInt((params.get(1) as String))
		}
		setSkill(new Skill_SingleSimulatorInteraction(simulator_host, simulator_port, defaultSpace), Cap_SimulatorInteraction)
		reportMessage("Successfully connected to elevator hardware at " + simulator_host + ":" + simulator_port);
		act_connectToSimulator()
	}


	/* 
	 * Received when the simulation is configured and setup (received at the start)
	 */
	on ModelChangePercept {
		// Get the model for the floors
		var floors = occurrence.model.floors
		val cars = occurrence.model.cars
		
		// 1 - get floor bounds
		lowestFloor = floors.get(0).id
		highestFloor = floors.get(floors.size - 1).id
		currentFloor = lowestFloor
		numCars = cars.size
		reportMessage("Elevator lowest floor is " + lowestFloor + "; and highest floor is " + highestFloor)
		
		// we don't start moving until we get a call
	}
	
	/*
	 * React upon requests from a floor
	 */
	on CarRequestPercept {
		var item : int
		queue.add(occurrence.floor)
		//queue.add(occurrence.direction)
		
	}
	
	/*
	 * React upon requests from inside the car
	 */
	on FloorRequestPercept {
		
	}

	/* 
	 * When the car arrives to the destination, report it.
	 */
	on CarArrivedPercept {
		reportArrivedAt(occurrence.car, occurrence.floor)
		currentFloor = occurrence.floor
		moving = false
	}

	on PersonEnteredPercept {
		currentCapacity += 1
	}

	on PersonExitedPercept {
		currentCapacity -= 1
	}


	/*
	 * When the door closes we can send the car to its next destination
	 */
	on DoorClosedPercept {
		var next_floor : int = -1
		var next_dir : Direction
		
		

		if (currentFloor == highestFloor) {
			next_floor = lowestFloor
			next_dir = Direction.UP
		} else if (currentFloor == lowestFloor) {
			next_floor = highestFloor
			next_dir = Direction.DOWN
		}
		
		if (next_floor > -1) {
			sendCar(new SendCarAction(occurrence.car, next_floor, next_dir)) // this is the actual MOVEMENT action!
			reportTravellingTo(occurrence.car, next_floor, next_dir)
			moving = true
		} 
		
	}
	
}